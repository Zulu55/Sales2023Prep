@page "/states/create/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Crear Estado/Departamento</h3>

<StateForm @ref="stateForm" State="state" OnValidSubmit="Create" ReturnAction="Return" />

@code {
    private State state = new();
    private StateForm? stateForm;

    [Parameter]
    public int Id { get; set; }

    private async Task Create()
    {
        Country country = new();
        var responseHTTP = await repository.Get<Country>($"api/countries/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("countries");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            country = responseHTTP.Response!;
        }

        if (country.States == null)
        {
            country.States = new List<State>();
        }

        country.States.Add(state);
        var httpResponse = await repository.Put("api/countries", country);

        if (httpResponse.Error)
        {
            var mensajeError = await httpResponse.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            stateForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo($"/countries/details/{Id}");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo($"/countries/details/{Id}");
    }
}
