@page "/states/edit/{CountryId:int}/{StateId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Estado/Departamento</h3>

@if (state is null)
{
    <div class="spinner" />
}
else
{
    <StateForm @ref="stateForm" State="state" OnValidSubmit="Edit" ReturnAction="Return" />
}


@code {
    private State? state;
    private StateForm? stateForm;

    [Parameter]
    public int CountryId { get; set; }

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<State>($"api/states/{StateId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("countries");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            state = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/states", state);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            stateForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo($"/countries/details/{CountryId}");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo($"/countries/details/{CountryId}");
    }
}
