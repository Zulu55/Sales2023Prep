@page "/states/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (state is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="cities">
        <RecordsComplete>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> @state.Name
                        <a class="btn btn-sm btn-success float-end" href="/states/detailes/@Id"><i class="oi oi-arrow-thick-left" /> Regresar</a>
                        <a class="btn btn-sm btn-primary float-end mx-1" href="/cities/create/@state.Id"><i class="oi oi-plus" /> Adicionar Ciudad</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPage" />


                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Ciudades</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var city in cities!)
                            {
                                <tr>
                                    <td>@city.Name</td>
                                    <td>
                                        <a href="/cities/edit/@Id/@city.Id" class="btn btn-warning"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger" @onclick=@(() => Delete(city))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </RecordsComplete>
    </GenericList>
}

@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }

    private async Task Load(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/cities?id={Id}&page={page}";
            url2 = $"api/cities/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/cities?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/cities/totalPages?id={Id}&filter={Filter}";
        }

        var responseHppt = await repository.Get<State>($"api/states/{Id}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }

    private async Task Delete(City city)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/cities/{city.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }

    private async Task ApplyFilterAsync()
    {
        await Load();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await Load();
    }
}
