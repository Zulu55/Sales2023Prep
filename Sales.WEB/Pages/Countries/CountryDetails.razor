@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

@if (country is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-3">
        <a class="btn btn-primary" href="/states/create/@country.Id">Nuevo Estado/Departamento</a>
        <a class="btn btn-success" href="/countries">Regresar</a>
    </div>

    <GenericList MyList="states">
        <RecordsComplete>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Departamento</th>
                        <th>Ciudades</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in country.States!)
                    {
                            <tr>
                                <td>
                                    <a href="/states/details/@state.Id" class="btn btn-info">Detalles</a>
                                    <a href="/states/edit/@Id/@state.Id" class="btn btn-warning">Editar</a>
                                    <button class="btn btn-danger" @onclick=@(() => Delete(state))>Borrar</button>
                                </td>
                                <td>@state.Name</td>
                                <td>@state.CitiesNumber</td>
                            </tr>
                    }
                </tbody>
            </table>
        </RecordsComplete>
    </GenericList>
}


@code {
    private Country? country;
    private List<State>? states;
    private CountryForm? countryForm;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.Get<Country>($"api/countries/{Id}");
        country = responseHppt.Response!;
        states = country.States!.ToList();
    }

    private async Task Delete(State state)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/states/{state.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
