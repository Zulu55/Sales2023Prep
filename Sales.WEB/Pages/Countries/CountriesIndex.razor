@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Paises</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/countries/create">Nuevo País</a>
</div>

<Paginacion PaginaActual="paginaActual" 
    PaginasTotales="paginasTotales"
    PaginaSeleccionada="PaginaSeleccionada"
    ></Paginacion>

<GenericList MyList="Countries">
    <RecordsComplete>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>País</th>
                    <th>Departamentos/Estados</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            <a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
                            <a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(country))>Borrar</button>
                        </td>
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </RecordsComplete>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Load(pagina);
    }

    private async Task Load(int pagina = 1)
    {
        var responseHppt = await repository.Get<List<Country>>($"api/countries?pagina={pagina}");
        var responseHppt2 = await repository.Get<int>($"api/countries/totalPages");
        Countries = responseHppt.Response!;
        paginasTotales = responseHppt2.Response!;
    }

    private async Task Delete(Country country)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/countries/{country.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
